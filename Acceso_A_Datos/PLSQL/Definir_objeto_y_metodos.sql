/*
1.- Crear dos objetos
Los tipos de objetos deben contener los siguientes campos:

		CLIENTE
				ID_CLIENTE NUMBER (PK)
				NOMBRE VARCHAR(50)
				DIRECCION (aprovechar la clase dirección ya creada para persona)
				TELEFONO NUMBER
				NIF VARCHAR(9)
		VENTA
				ID_VENTA NUMBER (PK)
				ID_CLIENTE NUMBER
				CONCEPTO	VARCHAR(30)
				CANTIDAD	INTEGER
				PRECIO_UNITARIO FLOAT
				FECHA_VENTA DATE
*/


//NO USAR, USA LOS DE ABAJO QUE YA TIENEN LOS METODOS
CREATE OR REPLACE TYPE OBJETO_DIRECCION AS OBJECT (

    CALLE VARCHAR2(50),
    CIUDAD VARCHAR2(50),
    CODIGO_POSTAL VARCHAR2(10)
);
/

CREATE OR REPLACE TYPE CLIENTE AS OBJECT (
    ID_CLIENTE NUMBER,
    NOMBRE VARCHAR2(50),
    DIRECCION OBJETO_DIRECCION, //USANDO LA CLASE DIRECCION
    TELEFONO NUMBER,
    NIF VARCHAR2(9)
);
/

-- DEFINICIÓN DEL TIPO DE OBJETO VENTA
CREATE OR REPLACE TYPE VENTA AS OBJECT (
    ID_VENTA NUMBER,
    ID_CLIENTE NUMBER,
    CONCEPTO VARCHAR2(30),
    CANTIDAD INTEGER,
    PRECIO_UNITARIO FLOAT,
    FECHA_VENTA DATE
);
/

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/*
2.- Crear dos tablas

Crear las tablas asociadas a los tipos de objeto creados

*/
-- CREACIÓN DE LA TABLA CLIENTE
CREATE TABLE TABLA_CLIENTES OF CLIENTE (
    ID_CLIENTE PRIMARY KEY
);

-- CREACIÓN DE LA TABLA VENTA
CREATE TABLE TABLA_VENTA OF VENTA (
    ID_VENTA PRIMARY KEY,
    ID_CLIENTE REFERENCES TABLA_CLIENTES(ID_CLIENTE)
);


////////////////////////////////////////////////////////////////////////////////////////

/*
3.- Crear los métodos asociados
Ambos objetos deben tener un constructor que cree un registro en la tabla asociada.

VENTA:
Método que devuelva el precio de una venta indicándole el ID_VENTA
Método que borre un registro en la BD. No tiene que devolver ningún valor
Método estático que devuelva el valor de un producto dado un precio unitario y CANTIDAD

CLIENTE:
Método que compare si dos clientes son iguales	


*/

-- AHORA EL TYPO VENTA LE AÑADO LOS METODOS
CREATE OR REPLACE TYPE VENTA AS OBJECT (
    ID_VENTA NUMBER,
    ID_CLIENTE NUMBER,
    CONCEPTO VARCHAR2(30),
    CANTIDAD INTEGER,
    PRECIO_UNITARIO FLOAT,
    FECHA_VENTA DATE,
    MEMBER PROCEDURE INSERTAR,
    MEMBER FUNCTION OBTENER_PRECIO RETURN FLOAT,
    MEMBER PROCEDURE ELIMINAR,
    STATIC FUNCTION CALCULAR_VALOR(PRECIO_UNITARIO FLOAT, CANTIDAD INTEGER) RETURN FLOAT
);
/

// implemetar  LOS MÉTODOS PARA VENTA
CREATE OR REPLACE TYPE BODY VENTA AS 
    MEMBER PROCEDURE INSERTAR IS
    BEGIN
        INSERT INTO TABLA_VENTA VALUES (SELF);
    END;

    MEMBER FUNCTION OBTENER_PRECIO RETURN FLOAT IS
        precio FLOAT;
    BEGIN
        SELECT PRECIO_UNITARIO * CANTIDAD INTO precio FROM VENTA WHERE ID_VENTA = SELF.ID_VENTA; //sacado de internet
        RETURN precio;
    END;

    MEMBER PROCEDURE ELIMINAR IS
    BEGIN
        DELETE FROM VENTA WHERE ID_VENTA = SELF.ID_VENTA;
    END;

    STATIC FUNCTION CALCULAR_VALOR(PRECIO_UNITARIO FLOAT, CANTIDAD INTEGER) RETURN FLOAT IS
    BEGIN
        RETURN PRECIO_UNITARIO * CANTIDAD;
    END;
END;
/

-- REDEFINICIÓN DEL TIPO DE OBJETO CLIENTE CON MÉTODO
CREATE OR REPLACE TYPE CLIENTE AS OBJECT (
    ID_CLIENTE NUMBER,
    NOMBRE VARCHAR2(50),
    DIRECCION OBJETO_DIRECCION,
    TELEFONO NUMBER,
    NIF VARCHAR2(9),
    MEMBER PROCEDURE INSERTAR,
    MEMBER FUNCTION ES_IGUAL(OTRO_CLIENTE CLIENTE) RETURN BOOLEAN
);
/

// integrar los metodos para cliente
CREATE OR REPLACE TYPE BODY CLIENTE AS 
    MEMBER PROCEDURE INSERTAR IS
    BEGIN
        INSERT INTO TABLA_CLIENTES VALUES (SELF);
    END;

    MEMBER FUNCTION ES_IGUAL(OTRO_CLIENTE CLIENTE) RETURN BOOLEAN IS
    BEGIN
        RETURN SELF.ID_CLIENTE = OTRO_CLIENTE.ID_CLIENTE;
    END;
END;
/


/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

4.- Código
 Código que verifique que los métodos funcionan correctamente


DECLARE
    -- CREANDO INSTANCIAS DE LOS OBJETOS
    CLIENTE1 CLIENTE;
    CLIENTE2 CLIENTE;
    VENTA1 VENTA;
    PRECIO_VENTA FLOAT;
    VALOR_PRODUCTO FLOAT;
BEGIN
    -- INICIALIZANDO Y INSERTANDO UN CLIENTE
    CLIENTE1 := CLIENTE(1, 'MARIO RISCO', OBJETO_DIRECCION('CALLE 123', 'CIUDAD', '25223'), 123456789, 'ABC123456');
    CLIENTE1.INSERTAR;

    -- INICIALIZANDO Y INSERTANDO OTRO CLIENTE
    CLIENTE2 := CLIENTE(2, 'PABLO SANCHEZ', OBJETO_DIRECCION('CALLE 456', 'CIUDAD', '50002'), 987654321, 'ABC12345A');
    CLIENTE2.INSERTAR;

    //metodo para verificar si son iguales 
    IF CLIENTE1.ES_IGUAL(CLIENTE2) THEN
        DBMS_OUTPUT.PUT_LINE('LOS CLIENTES SON IGUALES.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('LOS CLIENTES SON DIFERENTES.');
    END IF;

    --se crea una venta con los el segundo constructor
    VENTA1 := VENTA(1, 1, 'PRODUCTO X', 10, 20.5, SYSDATE); //SYSDATE TOMA LA FCHA DE AHORA 
    VENTA1.INSERTAR;

    //metodo para obtner el precio a partir del id de producto
    PRECIO_VENTA := VENTA1.OBTENER_PRECIO;
    DBMS_OUTPUT.PUT_LINE('PRECIO DE LA VENTA: ' || TO_CHAR(PRECIO_VENTA)); //CON EL TO CHART CAMBIAMOS DE INTEGER A STRING

    // PARA CALCULAR  EL VALOR DE UN PRODUCTO
    VALOR_PRODUCTO := VENTA.CALCULAR_VALOR(15.0, 5); // LE PASAMOS POR PARAMETRO LOS VALORES QUE QUERAMOS
    DBMS_OUTPUT.PUT_LINE('VALOR DEL PRODUCTO: ' || TO_CHAR(VALOR_PRODUCTO)); //CON EL TO CHART CAMBIAMOS DE INTEGER A STRING

    // eliminar venta
    VENTA1.ELIMINAR;

    -- VERIFICACIÓN SI LA VENTA HA SIDO ELIMINADA (ESTO GENERARÁ UN ERROR SI LA VENTA YA NO EXISTE)
    BEGIN
        SELECT * INTO VENTA1 FROM VENTA WHERE ID_VENTA = VENTA1.ID_VENTA;
        DBMS_OUTPUT.PUT_LINE('LA VENTA AÚN EXISTE EN LA BASE DE DATOS.');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('LA VENTA HA SIDO ELIMINADA CORRECTAMENTE.');
    END;
END;